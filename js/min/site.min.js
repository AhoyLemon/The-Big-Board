function randomNumber(min,max) {
  return Math.floor(Math.random() * (max - min) ) + min;
}

function workThisArray(myArray) {

  let r = Math.floor(Math.random()*(myArray.length));
  let message = '';

  myArray[r].forEach(function(k) {
    //console.log(typeof k);
    if (typeof k == "object") {
      //console.log(k)
      var z = Math.floor(Math.random()*(k.length));

      if (typeof k[z] == "object") {
        k[z].forEach(function(a) {
          if (typeof a == "object") {
            message += a[(Math.floor(Math.random()*(a.length)))];
          } else {
            message += a;
          }
        });
      } else {
        message += k[z];
      }
    } else {
      message += k;
    }
  });
  return message;
}


function stringInArray(s, a) {
  let n = a.indexOf(s);
  if (n > -1) {
    return true;
  } else {
    return false;
  }
}

function randomFrom(array) {
  return array[Math.floor(Math.random()*(array.length))];
}

function removeFromArray(array,key,value) {
  for (var i = array.length - 1; i >= 0; --i) {
    if (array[i][key] == value) {
        array.splice(i,1);
    }
  }
}

function findInArray(array,key,value) {
  for (var i = array.length - 1; i >= 0; --i) {
    if (array[i][key] == value) {
      return i;
      //alert(i);
      //break;
    }
  }
}


/*
function formatDate(d) {
  const allMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ]
  const MonthAbbr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ]
  let e = d.split("-");
  return MonthAbbr[parseInt(e[1] - 1)] + ' ' + e[2] + ', ' + e[0];
}
*/


function shuffle(o){
  for(var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
  return o;
}

function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

function bold(string) {
  return '<strong>' + string + '</strong>';
}

function similarity(s1, s2) {
  var longer = s1;
  var shorter = s2;
  if (s1.length < s2.length) {
    longer = s2;
    shorter = s1;
  }
  var longerLength = longer.length;
  if (longerLength == 0) {
    return 1.0;
  }
  return (longerLength - editDistance(longer, shorter)) / parseFloat(longerLength);
}

function editDistance(s1, s2) {
  s1 = s1.toLowerCase();
  s2 = s2.toLowerCase();

  let costs = [];
  for (let i = 0; i <= s1.length; i++) {
    var lastValue = i;
    for (let j = 0; j <= s2.length; j++) {
      if (i == 0)
        costs[j] = j;
      else {
        if (j > 0) {
          let newValue = costs[j - 1];
          if (s1.charAt(i - 1) != s2.charAt(j - 1))
            newValue = Math.min(Math.min(newValue, lastValue),
              costs[j]) + 1;
          costs[j - 1] = lastValue;
          lastValue = newValue;
        }
      }
    }
    if (i > 0)
      costs[s2.length] = lastValue;
  }
  return costs[s2.length];
}

function testChance(chance) {
  let r = Math.floor(Math.random() * 100) + 1;
  if (chance >= r) {
    return true;
  } else {
    return false;
  }
}

function getParams() {
  var vars = {};
  var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {
      vars[key] = value;
  });
  if (vars && vars != {}) {
    return vars;
  } else {
    return false;
  }
}


function sendEvent(c, a, l, v) {
  if (v) {
    ga('send', 'event', { eventCategory: c, eventAction: a, eventLabel: l, eventValue:v });
    console.log('CATEGORY: '+c+', ACTION:'+a+', LABEL:'+l+', VALUE:'+v);
  } else if (l) {
    ga('send', 'event', { eventCategory: c, eventAction: a, eventLabel: l });
    console.log('CATEGORY: '+c+', ACTION:'+a+', LABEL:'+l);
  } else {
    ga('send', 'event', { eventCategory: c, eventAction: a });
    console.log('CATEGORY: '+c+', ACTION:'+a);
  }
}
//@prepros-prepend globals/_functions.js

//@prepros-append partials/_variables.js
//@prepros-append partials/_boxes.js

//@prepros-append partials/_load-boxes.js

//@prepros-append partials/_vue.js
const siteURL = "";

var sound = new Howl({
  src: ['audio/boop1.mp3']
});

var dingdingding = new Howl({
  src: ['audio/dingdingding.mp3']
});

var whammySound = new Howl({
  src: ['audio/whammy.mp3']
});
const roundOneBoxes = [
  {
    title:    "How to Divorce a Missing Spouse in the USA",
    provider: "advancedclass",
    rating:   "WTF",
    url:      "https://www.wikihow.com/Divorce-a-Missing-Spouse-in-the-USA",
    file:     "divorce-a-missing-spouse-in-the-usa.jpg"
  },
  {
    title:    "How to Vomit While Driving",
    provider: "dickthedick",
    rating:   "YUK",
    url:      "https://www.wikihow.com/Vomit-While-Driving",
    file:     "Vomit-While-Driving.jpg"
  },
  {
    title:    "How to Get over Your Fear of Slenderman",
    provider: "Wrought",
    rating:   "LOL",
    url:      "https://www.wikihow.com/Get-over-Your-Fear-of-Slenderman",
    file:     "Get-over-Your-Fear-of-Slenderman.jpg"
  },
  {
    title:    "How to Hogtie Someone",
    provider: "Eider Duck",
    rating:   "WTF",
    url:      "https://www.wikihow.com/Hogtie-Someone",
    file:     "Hogtie-Someone.jpg"
  },
  {
    title:    "How to Become Good at Knife Fighting",
    provider: "Jack Chick",
    rating:   "WTF",
    url:      "https://www.wikihow.com/Become-Good-at-Knife-Fighting",
    file:     "Become-Good-at-Knife-Fighting.jpg"
  },
  {
    title:    "How to Tell Whether You are Left Wing or Right Wing",
    provider: "Murphy",
    rating:   "WTF",
    url:      "https://www.wikihow.com/Tell-Whether-You%27re-Right-Wing-or-Left-Wing",
    file:     "Right-Wing-or-Left-Wing.jpg"
  },
  {
    title:    "How to Perform a Monologue",
    provider: "Spooks",
    rating:   "LOL",
    url:      "https://www.wikihow.com/Perform-a-Monologue",
    file:     "Perform-a-Monologue.jpg"
  },
  {
    title:    "How to Do Black Magic",
    provider: "crow",
    rating:   "LOL",
    url:      "https://www.wikihow.com/Do-Black-Magic",
    file:     "Do-Black-Magic.jpg"
  },
  {
    title:    "How to Tell if Someone is Your Friend",
    provider: "Adam Bozarth",
    rating:   "WTF",
    url:      "https://www.wikihow.com/Tell-if-Someone-Is-Your-Friend",
    file:     "Tell-if-Someone-Is-Your-Friend.jpg"
  },
  {
    title:    "How to Become Pope",
    provider: "crow",
    rating:   "WTF",
    url:      "https://www.wikihow.com/Become-Pope",
    file:     "Become-Pope.jpg"
  },
  {
    title:    "How to Become Pope",
    provider: "Adam Bozarth",
    rating:   "WTF",
    url:      "https://www.youtube.com/watch?v=057tOLxJ4vI",
    file:     "songer.jpg",
    whammy:   true
  },
  {
    title:    "“From Nightmares and Rockets” (An Elon Musk Erotic Fanfic)",
    provider: "Seth “Slimy” Rollins",
    rating:   "YUK",
    url:      "https://archiveofourown.org/works/14412927/chapters/33287679",
    file:     "muskgrimes.jpg",
    whammy:   true
  },
];
shuffle(roundOneBoxes);

const roundOne = [];

for (i = 0; i < roundOneBoxes.length; i++) {
  let r = roundOneBoxes[i];

  console.log(r);
  r.focus = false;
  r.selected = false;
  r.whammy = false;
  r.blinking = false;

  if (!r.whammy) {
    r.whammy = false;
  }
  /*
  r.slug = wikiHow[i].slug;
  r.imgSrc ='https://damn.dog/img/pics/'+wikiHow[i].slug.toLowerCase()+'.jpg';
  r.title = 'How To ' + wikiHow[i].slug.replace(/-/g, ' ');
  let c = randomNumber(1,5);
  
  if (c == 2) {
    r.selected = true;
  } else {
    r.selected = false;
  }
  
  r.whammy = false;
  r.focus = false;
  r.blinking = false;

  
  */

  roundOne.push(r);
}


/*
let r = randomNumber(0,6);
roundOne[r].imgSrc = 'img/whammy.png';
roundOne[r].title = "Daniel Songer's Comedy Act #191: The Day After The End Of The World Born In Hell Born Again In Hell";
roundOne[r].whammy = true;
roundOne[r].selected = false;

r = randomNumber(7,11)
roundOne[r].imgSrc = 'img/whammy.png';
roundOne[r].title = "From Nightmares and Rockets:  An Elon Musk Erotic Fanfic";
roundOne[r].whammy = true;
roundOne[r].selected = false;
*/
var app = new Vue({
  el: '#app',
  data: {
    mode: 'spin',
    spinning: false,
    polling: null,
    ticks: 0,
    temp: {
      lastFocused: 0,
      currentFocus: 0
    },
    current: {},
    rounds: [
      roundOne
    ]
  },

  methods: {
    handleGlobalKeyDown(e) {
      let self = this;
      console.log(e.keyCode);
      
      if (e.keyCode == 32) {

        if (self.mode == 'spin') {
          self.pickOneRandomly();
        } else if (self.mode == 'show title') {
          self.closeTheTitle();
        }
        
      }


    },

    setDeceleratingTimeout(callback, factor, times) {
      let self = this;
      //let tT = times;
      var internalCallback = function(tick, counter) {
        return function() {
          if (--tick >= 0) {
            if (tick < 5) {
              factor = (factor * 1.1);
            }
            window.setTimeout(internalCallback, ++counter * factor);
            callback();
          } else {

            if (self.rounds[0][self.temp.currentFocus].whammy == true) {
              whammySound.play();
            } else {
              dingdingding.play();
            }
            
            
            self.current = self.rounds[0][self.temp.currentFocus];
            self.rounds[0][self.temp.currentFocus].blinking = true;

            setTimeout(function(){ 
              self.spinning = false;
              self.mode = 'show title';
            }, 3200);

          }
        }
      }(times, 0);
      window.setTimeout(internalCallback, factor);
    },
    pickOneRandomly() {
      let self = this;

      if (self.spinning == false) {
        self.spinning = false;

        //setDeceleratingTimeout(function(){ console.log('bye'); }, 100, 10);
        self.setDeceleratingTimeout(function(){ self.boop(); }, 15, 42);

      }
    },

    boop() {
      let self = this;

      let c;
      let validToFocus = false;
      while (validToFocus == false) {
        c = randomNumber(0,self.rounds[0].length);
        if (c != self.temp.lastFocused && self.rounds[0][c].selected != true) {
          validToFocus = true;
        }
      }
      if (validToFocus == true) {
        sound.play();
        self.rounds[0][self.temp.lastFocused].focus = false;
        self.rounds[0][c].focus = true;
        self.temp.lastFocused = c;
        self.temp.currentFocus = c; 
      }
    },

    closeTheTitle() {
      let self = this;
      self.rounds[0][self.temp.currentFocus].blinking = false;
      self.rounds[0][self.temp.currentFocus].selected = true;
      self.mode = 'spin'; 
    }



  },



  computed: {

  },


  mounted: function() {

  },


});


window.addEventListener('keydown', function(e) {
  app.handleGlobalKeyDown(e);
});

//# sourceMappingURL=site.min.js.map